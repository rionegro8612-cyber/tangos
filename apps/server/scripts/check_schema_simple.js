const { Client } = require("pg");

const DATABASE_URL = "postgres://tango:tango123@localhost:5432/tango";

async function checkSchema() {
  const client = new Client({ connectionString: DATABASE_URL });

  try {
    await client.connect();
    console.log("‚úÖ PostgreSQL Ïó∞Í≤∞ ÏÑ±Í≥µ");

    // ÌÖåÏù¥Î∏î Î™©Î°ù ÌôïÏù∏
    const tablesResult = await client.query(`
      SELECT table_name, table_type 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);

    console.log("\nüìã ÏÉùÏÑ±Îêú ÌÖåÏù¥Î∏î:");
    tablesResult.rows.forEach((row) => {
      console.log(`  - ${row.table_name} (${row.table_type})`);
    });

    // users ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏
    if (tablesResult.rows.some((r) => r.table_name === "users")) {
      console.log("\nüë• users ÌÖåÏù¥Î∏î Íµ¨Ï°∞:");
      const usersResult = await client.query(`
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns 
        WHERE table_name = 'users' 
        ORDER BY ordinal_position
      `);

      usersResult.rows.forEach((row) => {
        console.log(
          `  - ${row.column_name}: ${row.data_type} ${row.is_nullable === "NO" ? "NOT NULL" : "NULL"} ${row.column_default ? `DEFAULT ${row.column_default}` : ""}`,
        );
      });

      // phone_e164_norm UNIQUE Ï†úÏïΩÏ°∞Í±¥ ÌôïÏù∏
      const uniqueResult = await client.query(`
        SELECT constraint_name, constraint_type
        FROM information_schema.table_constraints 
        WHERE table_name = 'users' AND constraint_type = 'UNIQUE'
      `);

      console.log("\nüîí users ÌÖåÏù¥Î∏î Ï†úÏïΩÏ°∞Í±¥:");
      uniqueResult.rows.forEach((row) => {
        console.log(`  - ${row.constraint_name}: ${row.constraint_type}`);
      });
    }

    // auth_sms_codes ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏
    if (tablesResult.rows.some((r) => r.table_name === "auth_sms_codes")) {
      console.log("\nüì± auth_sms_codes ÌÖåÏù¥Î∏î Íµ¨Ï°∞:");
      const smsResult = await client.query(`
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns 
        WHERE table_name = 'auth_sms_codes' 
        ORDER BY ordinal_position
      `);

      smsResult.rows.forEach((row) => {
        console.log(
          `  - ${row.column_name}: ${row.data_type} ${row.is_nullable === "NO" ? "NOT NULL" : "NULL"} ${row.column_default ? `DEFAULT ${row.column_default}` : ""}`,
        );
      });
    }
  } catch (error) {
    console.error("‚ùå Ïò§Î•ò:", error.message);
  } finally {
    await client.end();
  }
}

checkSchema();
