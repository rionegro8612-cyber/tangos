import { context, trace } from '@opentelemetry/api';
import { sanitizeObject, maskPhone, maskEmail, maskName } from './security';
import { 
  compressLog, 
  shouldSampleLog, 
  aggregateHourlyLogs, 
  aggregateDailyLogs,
  LogLifecycleStage 
} from './log-retention';

// ===== Audit Î°úÍ∑∏ ÌÉÄÏûÖ Ï†ïÏùò =====

export interface AuditLogEntry {
  // Í∏∞Î≥∏ ÏãùÎ≥Ñ Ï†ïÎ≥¥
  id: string;                    // Í≥†Ïú† ID (UUID)
  timestamp: string;             // ISO 8601 ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ
  requestId: string;             // ÏöîÏ≤≠ ID (Ï∂îÏ†ÅÏö©)
  traceId: string;               // OpenTelemetry trace ID
  spanId: string;                // OpenTelemetry span ID
  
  // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
  userId?: string;               // ÏÇ¨Ïö©Ïûê ID (Ïù∏Ï¶ùÎêú Í≤ΩÏö∞)
  userPhone?: string;            // ÏÇ¨Ïö©Ïûê Ï†ÑÌôîÎ≤àÌò∏ (ÎßàÏä§ÌÇπÎê®)
  userEmail?: string;            // ÏÇ¨Ïö©Ïûê Ïù¥Î©îÏùº (ÎßàÏä§ÌÇπÎê®)
  userIp: string;                // ÏÇ¨Ïö©Ïûê IP Ï£ºÏÜå
  userAgent?: string;            // ÏÇ¨Ïö©Ïûê ÏóêÏù¥Ï†ÑÌä∏
  
  // Í∞êÏÇ¨ Ïù¥Î≤§Ìä∏ Ï†ïÎ≥¥
  eventType: AuditEventType;     // Í∞êÏÇ¨ Ïù¥Î≤§Ìä∏ ÌÉÄÏûÖ
  eventCategory: AuditEventCategory; // Í∞êÏÇ¨ Ïù¥Î≤§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨
  action: 'create' | 'read' | 'update' | 'delete' | 'consent' | 'withdraw' | 'accept'; // ÏàòÌñâÎêú Ïï°ÏÖò
  
  // Î¶¨ÏÜåÏä§ Ï†ïÎ≥¥
  resourceType: string;          // Î¶¨ÏÜåÏä§ ÌÉÄÏûÖ (user, consent, pii Îì±)
  resourceId?: string;           // Î¶¨ÏÜåÏä§ ID
  resourcePath?: string;         // API Í≤ΩÎ°ú
  
  // Î≥ÄÍ≤Ω ÎÇ¥Ïö©
  oldValue?: any;                // Î≥ÄÍ≤Ω Ï†Ñ Í∞í (ÎØºÍ∞êÏ†ïÎ≥¥ Ï†úÍ±∞Îê®)
  newValue?: any;                // Î≥ÄÍ≤Ω ÌõÑ Í∞í (ÎØºÍ∞êÏ†ïÎ≥¥ Ï†úÍ±∞Îê®)
  changes?: AuditChange[];       // Íµ¨Ï≤¥Ï†ÅÏù∏ Î≥ÄÍ≤Ω ÏÇ¨Ìï≠
  
  // Î©îÌÉÄÎç∞Ïù¥ÌÑ∞
  reason?: string;               // Î≥ÄÍ≤Ω ÏÇ¨Ïú†
  adminAction?: boolean;         // Í¥ÄÎ¶¨ÏûêÏóê ÏùòÌïú Î≥ÄÍ≤Ω Ïó¨Î∂Ä
  consentRequired?: boolean;     // ÎèôÏùòÍ∞Ä ÌïÑÏöîÌïú Î≥ÄÍ≤ΩÏù∏ÏßÄ Ïó¨Î∂Ä
  
  // Î≥¥Ïïà Ï†ïÎ≥¥
  sessionId?: string;            // ÏÑ∏ÏÖò ID
  tokenType?: string;            // ÌÜ†ÌÅ∞ ÌÉÄÏûÖ (access, refresh Îì±)
  
  // Í∞êÏÇ¨ Ï∂îÏ†Å
  parentEventId?: string;        // Î∂ÄÎ™® Ïù¥Î≤§Ìä∏ ID (Ïó∞Í¥Ä Ïù¥Î≤§Ìä∏ Ï∂îÏ†Å)
  relatedEventIds?: string[];    // Í¥ÄÎ†® Ïù¥Î≤§Ìä∏ IDÎì§
  
  // Î≥¥Ï°¥ Ï†ïÏ±Ö
  retentionDays?: number;        // Î≥¥Ï°¥ Í∏∞Í∞Ñ (Ïùº) - ÏïïÏ∂ï Ïãú optional
  legalBasis?: string;           // Î≤ïÏ†Å Í∑ºÍ±∞ (GDPR, Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏Î≤ï Îì±)
  
  // ÏãúÏä§ÌÖú Ï†ïÎ≥¥
  environment?: string;          // ÌôòÍ≤Ω (development, staging, production) - ÏïïÏ∂ï Ïãú optional
  version?: string;              // Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î≤ÑÏ†Ñ - ÏïïÏ∂ï Ïãú optional
  source?: string;               // ÏÜåÏä§ (api, admin, system Îì±) - ÏïïÏ∂ï Ïãú optional
  
  // üÜï Î°úÍ∑∏ Î≥¥Ï°¥ Í¥ÄÎ¶¨ Ï†ïÎ≥¥
  lifecycleStage?: LogLifecycleStage;  // ÌòÑÏû¨ ÏàòÎ™ÖÏ£ºÍ∏∞ Îã®Í≥Ñ
  compressed?: boolean;                // ÏïïÏ∂ï Ïó¨Î∂Ä
  sampled?: boolean;                   // ÏÉòÌîåÎßÅ Ïó¨Î∂Ä
  originalSize?: number;               // ÏõêÎ≥∏ ÌÅ¨Í∏∞ (Î∞îÏù¥Ìä∏)
  compressedSize?: number;             // ÏïïÏ∂ï ÌõÑ ÌÅ¨Í∏∞ (Î∞îÏù¥Ìä∏)
}

// Í∞êÏÇ¨ Ïù¥Î≤§Ìä∏ ÌÉÄÏûÖ
export type AuditEventType = 
  // Í≥ÑÏ†ï Í¥ÄÎ†®
  | 'USER_REGISTRATION' | 'USER_LOGIN' | 'USER_LOGOUT' | 'USER_DELETION'
  | 'PASSWORD_CHANGE' | 'PASSWORD_RESET' | 'PROFILE_UPDATE'
  
  // Í∂åÌïú Í¥ÄÎ†®  
  | 'ROLE_ASSIGNMENT' | 'ROLE_REMOVAL' | 'PERMISSION_GRANT' | 'PERMISSION_REVOKE'
  | 'ADMIN_ACCESS' | 'PRIVILEGE_ESCALATION'
  
  // ÏïΩÍ¥ÄÎèôÏùò Í¥ÄÎ†®
  | 'TERMS_ACCEPT' | 'TERMS_WITHDRAW' | 'TERMS_UPDATE' | 'PRIVACY_CONSENT'
  | 'MARKETING_CONSENT' | 'THIRD_PARTY_CONSENT'
  
  // Í∞úÏù∏Ï†ïÎ≥¥ Í¥ÄÎ†®
  | 'PII_VIEW' | 'PII_UPDATE' | 'PII_DELETE' | 'PII_EXPORT'
  | 'DATA_RETENTION' | 'DATA_ANONYMIZATION'
  
  // Î≥¥Ïïà Í¥ÄÎ†®
  | 'SECURITY_ALERT' | 'SUSPICIOUS_ACTIVITY' | 'RATE_LIMIT_VIOLATION'
  | 'AUTHENTICATION_FAILURE' | 'AUTHORIZATION_FAILURE'
  
  // ÏãúÏä§ÌÖú Í¥ÄÎ†®
  | 'CONFIGURATION_CHANGE' | 'BACKUP_CREATED' | 'RESTORE_PERFORMED'
  | 'MAINTENANCE_MODE' | 'SYSTEM_UPDATE';

// Í∞êÏÇ¨ Ïù¥Î≤§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨
export type AuditEventCategory = 
  | 'ACCOUNT_MANAGEMENT'      // Í≥ÑÏ†ï Í¥ÄÎ¶¨
  | 'ACCESS_CONTROL'          // Ï†ëÍ∑º Ï†úÏñ¥
  | 'CONSENT_MANAGEMENT'      // ÎèôÏùò Í¥ÄÎ¶¨
  | 'PRIVACY_PROTECTION'      // Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏
  | 'SECURITY_MONITORING'     // Î≥¥Ïïà Î™®ÎãàÌÑ∞ÎßÅ
  | 'SYSTEM_OPERATIONS'       // ÏãúÏä§ÌÖú Ïö¥ÏòÅ
  | 'COMPLIANCE'              // Í∑úÏ†ï Ï§ÄÏàò
  | 'DATA_PROCESSING';        // Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨

// Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ ÏÉÅÏÑ∏ Ï†ïÎ≥¥
export interface AuditChange {
  field: string;               // Î≥ÄÍ≤ΩÎêú ÌïÑÎìúÎ™Ö
  oldValue: any;               // Î≥ÄÍ≤Ω Ï†Ñ Í∞í
  newValue: any;               // Î≥ÄÍ≤Ω ÌõÑ Í∞í
  changeType: 'added' | 'removed' | 'modified'; // Î≥ÄÍ≤Ω ÌÉÄÏûÖ
  sensitive: boolean;           // ÎØºÍ∞êÏ†ïÎ≥¥ Ïó¨Î∂Ä
}

// ===== Audit Î°úÍ±∞ ÌÅ¥ÎûòÏä§ =====

export class AuditLogger {
  private static instance: AuditLogger;
  private logs: AuditLogEntry[] = [];
  private maxLogs: number = 10000; // Î©îÎ™®Î¶¨ Î≥¥Ìò∏Î•º ÏúÑÌïú ÏµúÎåÄ Î°úÍ∑∏ Ïàò
  
  private constructor() {}
  
  static getInstance(): AuditLogger {
    if (!AuditLogger.instance) {
      AuditLogger.instance = new AuditLogger();
    }
    return AuditLogger.instance;
  }
  
  // ===== Í≥ÑÏ†ï Í¥ÄÎ†® Í∞êÏÇ¨ Î°úÍ∑∏ =====
  
  /**
   * ÏÇ¨Ïö©Ïûê Îì±Î°ù Í∞êÏÇ¨ Î°úÍ∑∏
   */
  logUserRegistration(
    requestId: string,
    userData: any,
    userIp: string,
    userAgent?: string,
    adminAction = false
  ): string {
    const eventId = this.generateEventId();
    
    const logEntry: AuditLogEntry = {
      id: eventId,
      timestamp: new Date().toISOString(),
      requestId,
      ...this.getTraceInfo(),
      userIp,
      userAgent,
      eventType: 'USER_REGISTRATION',
      eventCategory: 'ACCOUNT_MANAGEMENT',
      action: 'create',
      resourceType: 'user',
      resourceId: userData.id || userData.userId,
      resourcePath: '/auth/register',
      newValue: this.sanitizeUserData(userData),
      adminAction,
      consentRequired: true,
      retentionDays: 2555, // 7ÎÖÑ (Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏Î≤ï)
      legalBasis: 'Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏Î≤ï Ï†ú15Ï°∞',
      environment: process.env.NODE_ENV || 'development',
      version: process.env.npm_package_version || '1.0.0',
      source: 'api'
    };
    
    this.addLog(logEntry);
    return eventId;
  }
  
  /**
   * ÏÇ¨Ïö©Ïûê Î°úÍ∑∏Ïù∏ Í∞êÏÇ¨ Î°úÍ∑∏
   */
  logUserLogin(
    requestId: string,
    userId: string,
    userPhone: string,
    userIp: string,
    userAgent?: string,
    sessionId?: string,
    tokenType?: string
  ): string {
    const eventId = this.generateEventId();
    
    const logEntry: AuditLogEntry = {
      id: eventId,
      timestamp: new Date().toISOString(),
      requestId,
      ...this.getTraceInfo(),
      userId,
      userPhone: maskPhone(userPhone),
      userIp,
      userAgent,
      eventType: 'USER_LOGIN',
      eventCategory: 'ACCESS_CONTROL',
      action: 'read',
      resourceType: 'user',
      resourceId: userId,
      resourcePath: '/auth/login',
      sessionId,
      tokenType,
      retentionDays: 1095, // 3ÎÖÑ (ÌÜµÏã†ÎπÑÎ∞ÄÎ≥¥Ìò∏Î≤ï)
      legalBasis: 'ÌÜµÏã†ÎπÑÎ∞ÄÎ≥¥Ìò∏Î≤ï Ï†ú13Ï°∞',
      environment: process.env.NODE_ENV || 'development',
      version: process.env.npm_package_version || '1.0.0',
      source: 'api'
    };
    
    this.addLog(logEntry);
    return eventId;
  }
  
  /**
   * ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Î≥ÄÍ≤Ω Í∞êÏÇ¨ Î°úÍ∑∏
   */
  logProfileUpdate(
    requestId: string,
    userId: string,
    userPhone: string,
    userIp: string,
    oldData: any,
    newData: any,
    changes: AuditChange[],
    reason?: string,
    adminAction = false
  ): string {
    const eventId = this.generateEventId();
    
    const logEntry: AuditLogEntry = {
      id: eventId,
      timestamp: new Date().toISOString(),
      requestId,
      ...this.getTraceInfo(),
      userId,
      userPhone: maskPhone(userPhone),
      userIp,
      eventType: 'PROFILE_UPDATE',
      eventCategory: 'ACCOUNT_MANAGEMENT',
      action: 'update',
      resourceType: 'user',
      resourceId: userId,
      resourcePath: '/user/profile',
      oldValue: this.sanitizeUserData(oldData),
      newValue: this.sanitizeUserData(newData),
      changes: changes.map(change => ({
        ...change,
        oldValue: change.sensitive ? '[REDACTED]' : change.oldValue,
        newValue: change.sensitive ? '[REDACTED]' : change.newValue
      })),
      reason,
      adminAction,
      consentRequired: true,
      retentionDays: 2555,
      legalBasis: 'Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏Î≤ï Ï†ú15Ï°∞',
      environment: process.env.NODE_ENV || 'development',
      version: process.env.npm_package_version || '1.0.0',
      source: 'api'
    };
    
    this.addLog(logEntry);
    return eventId;
  }
  
  // ===== Í∂åÌïú Í¥ÄÎ†® Í∞êÏÇ¨ Î°úÍ∑∏ =====
  
  /**
   * Ïó≠Ìï† Ìï†Îãπ Í∞êÏÇ¨ Î°úÍ∑∏
   */
  logRoleAssignment(
    requestId: string,
    adminUserId: string,
    targetUserId: string,
    role: string,
    userIp: string,
    reason?: string
  ): string {
    const eventId = this.generateEventId();
    
    const logEntry: AuditLogEntry = {
      id: eventId,
      timestamp: new Date().toISOString(),
      requestId,
      ...this.getTraceInfo(),
      userId: adminUserId,
      userIp,
      eventType: 'ROLE_ASSIGNMENT',
      eventCategory: 'ACCESS_CONTROL',
      action: 'update',
      resourceType: 'user_role',
      resourceId: targetUserId,
      resourcePath: '/admin/users/roles',
      oldValue: { userId: targetUserId, roles: [] },
      newValue: { userId: targetUserId, roles: [role] },
      changes: [{
        field: 'roles',
        oldValue: [],
        newValue: [role],
        changeType: 'added',
        sensitive: false
      }],
      reason,
      adminAction: true,
      retentionDays: 2555,
      legalBasis: 'Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏Î≤ï Ï†ú15Ï°∞',
      environment: process.env.NODE_ENV || 'development',
      version: process.env.npm_package_version || '1.0.0',
      source: 'admin'
    };
    
    this.addLog(logEntry);
    return eventId;
  }
  
  // ===== ÏïΩÍ¥ÄÎèôÏùò Í¥ÄÎ†® Í∞êÏÇ¨ Î°úÍ∑∏ =====
  
  /**
   * ÏïΩÍ¥Ä ÎèôÏùò Í∞êÏÇ¨ Î°úÍ∑∏
   */
  logTermsConsent(
    requestId: string,
    userId: string,
    userPhone: string,
    userIp: string,
    termsType: string,
    version: string,
    action: 'accept' | 'withdraw',
    userAgent?: string
  ): string {
    const eventId = this.generateEventId();
    
    const logEntry: AuditLogEntry = {
      id: eventId,
      timestamp: new Date().toISOString(),
      requestId,
      ...this.getTraceInfo(),
      userId,
      userPhone: maskPhone(userPhone),
      userIp,
      userAgent,
      eventType: action === 'accept' ? 'TERMS_ACCEPT' : 'TERMS_WITHDRAW',
      eventCategory: 'CONSENT_MANAGEMENT',
      action,
      resourceType: 'terms_consent',
      resourceId: `${userId}_${termsType}_${version}`,
      resourcePath: `/consent/${termsType}`,
      newValue: {
        termsType,
        version,
        action,
        timestamp: new Date().toISOString()
      },
      consentRequired: false, // Ïù¥ÎØ∏ ÎèôÏùòÌïú ÎÇ¥Ïö©
      retentionDays: 2555,
      legalBasis: 'Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏Î≤ï Ï†ú15Ï°∞',
      environment: process.env.NODE_ENV || 'development',
      version: process.env.npm_package_version || '1.0.0',
      source: 'api'
    };
    
    this.addLog(logEntry);
    return eventId;
  }
  
  // ===== Í∞úÏù∏Ï†ïÎ≥¥ Í¥ÄÎ†® Í∞êÏÇ¨ Î°úÍ∑∏ =====
  
  /**
   * Í∞úÏù∏Ï†ïÎ≥¥ Ïó¥Îûå Í∞êÏÇ¨ Î°úÍ∑∏
   */
  logPiiView(
    requestId: string,
    userId: string,
    userPhone: string,
    userIp: string,
    dataType: string,
    dataId: string,
    reason: 'user_request' | 'admin_review' | 'legal_requirement',
    userAgent?: string
  ): string {
    const eventId = this.generateEventId();
    
    const logEntry: AuditLogEntry = {
      id: eventId,
      timestamp: new Date().toISOString(),
      requestId,
      ...this.getTraceInfo(),
      userId,
      userPhone: maskPhone(userPhone),
      userIp,
      userAgent,
      eventType: 'PII_VIEW',
      eventCategory: 'PRIVACY_PROTECTION',
      action: 'read',
      resourceType: 'pii_data',
      resourceId: dataId,
      resourcePath: `/user/data/${dataType}`,
      reason: `Í∞úÏù∏Ï†ïÎ≥¥ Ïó¥Îûå: ${reason}`,
      adminAction: reason === 'admin_review',
      retentionDays: 1095,
      legalBasis: 'Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏Î≤ï Ï†ú38Ï°∞',
      environment: process.env.NODE_ENV || 'development',
      version: process.env.npm_package_version || '1.0.0',
      source: 'api'
    };
    
    this.addLog(logEntry);
    return eventId;
  }
  
  /**
   * Í∞úÏù∏Ï†ïÎ≥¥ ÏÇ≠Ï†ú ÏöîÏ≤≠ Í∞êÏÇ¨ Î°úÍ∑∏
   */
  logPiiDeletionRequest(
    requestId: string,
    userId: string,
    userPhone: string,
    userIp: string,
    dataType: string,
    reason: 'user_request' | 'legal_requirement' | 'retention_expired' | 'data_breach',
    legalBasis?: string,
    userAgent?: string
  ): string {
    const eventId = this.generateEventId();
    
    const logEntry: AuditLogEntry = {
      id: eventId,
      timestamp: new Date().toISOString(),
      requestId,
      ...this.getTraceInfo(),
      userId,
      userPhone: maskPhone(userPhone),
      userIp,
      userAgent,
      eventType: 'PII_DELETE',
      eventCategory: 'PRIVACY_PROTECTION',
      action: 'delete',
      resourceType: 'pii_data',
      resourceId: userId,
      resourcePath: `/user/data/${dataType}`,
      reason: `Í∞úÏù∏Ï†ïÎ≥¥ ÏÇ≠Ï†ú ÏöîÏ≤≠: ${reason}`,
      adminAction: false,
      retentionDays: 2555, // ÏÇ≠Ï†ú ÏöîÏ≤≠ÏùÄ Îçî Ïò§Îûò Î≥¥Ï°¥
      legalBasis: legalBasis || 'Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏Î≤ï Ï†ú17Ï°∞',
      environment: process.env.NODE_ENV || 'development',
      version: process.env.npm_package_version || '1.0.0',
      source: 'api'
    };
    
    this.addLog(logEntry);
    return eventId;
  }
  
  // ===== Î≥¥Ïïà Í¥ÄÎ†® Í∞êÏÇ¨ Î°úÍ∑∏ =====
  
  /**
   * Î≥¥Ïïà Í≤ΩÍ≥† Í∞êÏÇ¨ Î°úÍ∑∏
   */
  logSecurityAlert(
    requestId: string,
    alertType: string,
    severity: 'low' | 'medium' | 'high' | 'critical',
    description: string,
    userIp: string,
    userId?: string,
    userPhone?: string,
    userAgent?: string
  ): string {
    const eventId = this.generateEventId();
    
    const logEntry: AuditLogEntry = {
      id: eventId,
      timestamp: new Date().toISOString(),
      requestId,
      ...this.getTraceInfo(),
      userId,
      userPhone: userPhone ? maskPhone(userPhone) : undefined,
      userIp,
      userAgent,
      eventType: 'SECURITY_ALERT',
      eventCategory: 'SECURITY_MONITORING',
      action: 'create',
      resourceType: 'security_alert',
      resourceId: alertType,
      resourcePath: '/security/alerts',
      newValue: {
        alertType,
        severity,
        description,
        timestamp: new Date().toISOString()
      },
      retentionDays: 2555,
      legalBasis: 'Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏Î≤ï Ï†ú29Ï°∞',
      environment: process.env.NODE_ENV || 'development',
      version: process.env.npm_package_version || '1.0.0',
      source: 'system'
    };
    
    this.addLog(logEntry);
    return eventId;
  }
  
  // ===== Ìó¨Ìçº Ìï®ÏàòÎì§ =====
  
  /**
   * OpenTelemetry trace Ï†ïÎ≥¥ Ï∂îÏ∂ú
   */
  private getTraceInfo() {
    try {
      const activeContext = context.active();
      const span = trace.getSpan(activeContext);
      
      if (span) {
        const spanContext = span.spanContext();
        return {
          traceId: spanContext.traceId,
          spanId: spanContext.spanId
        };
      }
    } catch (e) {
      // OpenTelemetryÍ∞Ä ÎπÑÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ Î¨¥Ïãú
    }
    
    return {
      traceId: 'unknown',
      spanId: 'unknown'
    };
  }
  
  /**
   * ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÎØºÍ∞êÏ†ïÎ≥¥ Ï†úÍ±∞
   */
  private sanitizeUserData(data: any): any {
    if (!data) return data;
    
    const sanitized = { ...data };
    
    // ÎØºÍ∞êÏ†ïÎ≥¥ ÌïÑÎìúÎì§ ÎßàÏä§ÌÇπ
    if (sanitized.phone) sanitized.phone = maskPhone(sanitized.phone);
    if (sanitized.email) sanitized.email = maskEmail(sanitized.email);
    if (sanitized.name) sanitized.name = maskName(sanitized.name);
    if (sanitized.password) sanitized.password = '[REDACTED]';
    if (sanitized.token) sanitized.token = '[REDACTED]';
    
    return sanitized;
  }
  
  /**
   * Í≥†Ïú† Ïù¥Î≤§Ìä∏ ID ÏÉùÏÑ±
   */
  private generateEventId(): string {
    return `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  
  /**
   * Î°úÍ∑∏ Ï∂îÍ∞Ä (Î©îÎ™®Î¶¨ Î≥¥Ìò∏ + Î≥¥Ï°¥ Ï†ïÏ±Ö Ï†ÅÏö©)
   */
  private addLog(logEntry: AuditLogEntry): void {
    // üÜï Î°úÍ∑∏ Î≥¥Ï°¥ Ï†ïÏ±Ö Ï†ÅÏö©
    const enhancedLogEntry = this.applyRetentionPolicy(logEntry);
    
    // ÏÉòÌîåÎßÅ Ï†ÅÏö©
    if (!enhancedLogEntry.sampled) {
      return; // ÏÉòÌîåÎßÅÎêú Î°úÍ∑∏Îäî Ï†ÄÏû•ÌïòÏßÄ ÏïäÏùå
    }
    
    this.logs.push(enhancedLogEntry);
    
    // Î©îÎ™®Î¶¨ Î≥¥Ìò∏Î•º ÏúÑÌïú Î°úÍ∑∏ Ïàò Ï†úÌïú
    if (this.logs.length > this.maxLogs) {
      this.logs = this.logs.slice(-this.maxLogs);
    }
    
    // ÏΩòÏÜîÏóê Í∞êÏÇ¨ Î°úÍ∑∏ Ï∂úÎ†• (Í∞úÎ∞ú ÌôòÍ≤Ω)
    if (process.env.NODE_ENV === 'development') {
      console.log('[AUDIT]', {
        id: enhancedLogEntry.id,
        eventType: enhancedLogEntry.eventType,
        action: enhancedLogEntry.action,
        userId: enhancedLogEntry.userId,
        resourceType: enhancedLogEntry.resourceType,
        timestamp: enhancedLogEntry.timestamp,
        lifecycleStage: enhancedLogEntry.lifecycleStage,
        compressed: enhancedLogEntry.compressed,
        sampled: enhancedLogEntry.sampled
      });
    }
  }
  
  /**
   * Î°úÍ∑∏ Î≥¥Ï°¥ Ï†ïÏ±Ö Ï†ÅÏö©
   */
  private applyRetentionPolicy(logEntry: AuditLogEntry): AuditLogEntry {
    // ÏõêÎ≥∏ ÌÅ¨Í∏∞ Í≥ÑÏÇ∞
    const originalSize = JSON.stringify(logEntry).length;
    
    // ÏàòÎ™ÖÏ£ºÍ∏∞ Îã®Í≥Ñ Í≤∞Ï†ï
    const lifecycleStage = this.getLogLifecycleStage(logEntry);
    
    // ÏÉòÌîåÎßÅ Ï†ÅÏö©
    const sampled = shouldSampleLog(logEntry);
    
    // ÏïïÏ∂ï Ï†ÅÏö©
    let compressedLog = logEntry;
    let compressed = false;
    let compressedSize = originalSize;
    
    if (lifecycleStage !== 'hot') {
      compressedLog = compressLog(logEntry);
      compressed = true;
      compressedSize = JSON.stringify(compressedLog).length;
    }
    
    // Î≥¥Ï°¥ Ï†ïÏ±Ö Ï†ïÎ≥¥ Ï∂îÍ∞Ä
    return {
      ...compressedLog,
      lifecycleStage,
      compressed,
      sampled,
      originalSize,
      compressedSize
    };
  }
  
  /**
   * Î°úÍ∑∏ ÏàòÎ™ÖÏ£ºÍ∏∞ Îã®Í≥Ñ Í≤∞Ï†ï
   */
  private getLogLifecycleStage(logEntry: AuditLogEntry): LogLifecycleStage {
    const logAge = this.getLogAge(logEntry.timestamp);
    
    if (logAge <= 7) {
      return 'hot';
    } else if (logAge <= 30) {
      return 'warm';
    } else if (logAge <= 90) {
      return 'cold';
    } else {
      return 'archived';
    }
  }
  
  /**
   * Î°úÍ∑∏ ÎÇòÏù¥ Í≥ÑÏÇ∞ (Ïùº Îã®ÏúÑ)
   */
  private getLogAge(timestamp: string): number {
    const logDate = new Date(timestamp);
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - logDate.getTime());
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  }
  
  // ===== Í≥µÍ∞ú Î©îÏÑúÎìúÎì§ =====
  
  /**
   * Î™®Îì† Í∞êÏÇ¨ Î°úÍ∑∏ Ï°∞Ìöå
   */
  getAllLogs(): AuditLogEntry[] {
    return [...this.logs];
  }
  
  /**
   * ÏÇ¨Ïö©ÏûêÎ≥Ñ Í∞êÏÇ¨ Î°úÍ∑∏ Ï°∞Ìöå
   */
  getLogsByUser(userId: string): AuditLogEntry[] {
    return this.logs.filter(log => log.userId === userId);
  }
  
  /**
   * Ïù¥Î≤§Ìä∏ ÌÉÄÏûÖÎ≥Ñ Í∞êÏÇ¨ Î°úÍ∑∏ Ï°∞Ìöå
   */
  getLogsByEventType(eventType: AuditEventType): AuditLogEntry[] {
    return this.logs.filter(log => log.eventType === eventType);
  }
  
  /**
   * Í∏∞Í∞ÑÎ≥Ñ Í∞êÏÇ¨ Î°úÍ∑∏ Ï°∞Ìöå
   */
  getLogsByDateRange(startDate: Date, endDate: Date): AuditLogEntry[] {
    return this.logs.filter(log => {
      const logDate = new Date(log.timestamp);
      return logDate >= startDate && logDate <= endDate;
    });
  }
  
  /**
   * Í∞êÏÇ¨ Î°úÍ∑∏ ÏÉÅÌÉú ÌôïÏù∏
   */
  getStatus() {
    return {
      totalLogs: this.logs.length,
      maxLogs: this.maxLogs,
      memoryUsage: process.memoryUsage(),
      environment: process.env.NODE_ENV,
      version: process.env.npm_package_version
    };
  }
  
  /**
   * Î°úÍ∑∏ Ï¥àÍ∏∞Ìôî (ÌÖåÏä§Ìä∏Ïö©)
   */
  clearLogs(): void {
    this.logs = [];
  }
  
  // üÜï Î°úÍ∑∏ ÏßëÍ≥Ñ Í∏∞Îä• Ï∂îÍ∞Ä
  
  /**
   * ÏãúÍ∞ÑÎ≥Ñ Î°úÍ∑∏ ÏßëÍ≥Ñ
   */
  getHourlyAggregations(): any[] {
    return aggregateHourlyLogs(this.logs);
  }
  
  /**
   * ÏùºÎ≥Ñ Î°úÍ∑∏ ÏßëÍ≥Ñ
   */
  getDailyAggregations(): any[] {
    return aggregateDailyLogs(this.logs);
  }
  
  /**
   * ÏàòÎ™ÖÏ£ºÍ∏∞Î≥Ñ Î°úÍ∑∏ ÌÜµÍ≥Ñ
   */
  getLifecycleStats(): {
    hot: { count: number; size: number; avgSize: number };
    warm: { count: number; size: number; avgSize: number };
    cold: { count: number; size: number; avgSize: number };
    archived: { count: number; size: number; avgSize: number };
  } {
    const stats = {
      hot: { count: 0, size: 0, avgSize: 0 },
      warm: { count: 0, size: 0, avgSize: 0 },
      cold: { count: 0, size: 0, avgSize: 0 },
      archived: { count: 0, size: 0, avgSize: 0 }
    };
    
    this.logs.forEach(log => {
      const stage = log.lifecycleStage || 'hot';
      const size = log.compressedSize || log.originalSize || 0;
      
      // ÏïàÏ†ÑÌïú Ïù∏Îç±Ïã±ÏùÑ ÏúÑÌï¥ 'deleted' Îã®Í≥Ñ Ï†úÏô∏
      if (stage !== 'deleted' && stats[stage as keyof typeof stats]) {
        const stat = stats[stage as keyof typeof stats];
        stat.count++;
        stat.size += size;
      }
    });
    
    // ÌèâÍ∑† ÌÅ¨Í∏∞ Í≥ÑÏÇ∞
    Object.values(stats).forEach(stat => {
      stat.avgSize = stat.count > 0 ? stat.size / stat.count : 0;
    });
    
    return stats;
  }
  
  /**
   * ÏïïÏ∂ï Î∞è ÏÉòÌîåÎßÅ ÌÜµÍ≥Ñ
   */
  getCompressionStats(): {
    totalLogs: number;
    compressedLogs: number;
    sampledLogs: number;
    compressionRatio: number;
    sizeReduction: number;
    totalOriginalSize: number;
    totalCompressedSize: number;
  } {
    const totalLogs = this.logs.length;
    const compressedLogs = this.logs.filter(log => log.compressed).length;
    const sampledLogs = this.logs.filter(log => log.sampled).length;
    
    const totalOriginalSize = this.logs.reduce((sum, log) => sum + (log.originalSize || 0), 0);
    const totalCompressedSize = this.logs.reduce((sum, log) => sum + (log.compressedSize || 0), 0);
    
    const compressionRatio = totalOriginalSize > 0 ? totalCompressedSize / totalOriginalSize : 1;
    const sizeReduction = totalOriginalSize - totalCompressedSize;
    
    return {
      totalLogs,
      compressedLogs,
      sampledLogs,
      compressionRatio,
      sizeReduction,
      totalOriginalSize,
      totalCompressedSize
    };
  }
}

// ===== Ïã±Í∏ÄÌÜ§ Ïù∏Ïä§ÌÑ¥Ïä§ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ =====
export const auditLogger = AuditLogger.getInstance();

// ===== Ìé∏Ïùò Ìï®ÏàòÎì§ =====

/**
 * ÏÇ¨Ïö©Ïûê Îì±Î°ù Í∞êÏÇ¨ Î°úÍ∑∏ (Í∞ÑÌé∏ Ìï®Ïàò)
 */
export function logUserRegistration(
  requestId: string,
  userData: any,
  userIp: string,
  userAgent?: string,
  adminAction = false
): string {
  return auditLogger.logUserRegistration(requestId, userData, userIp, userAgent, adminAction);
}

/**
 * ÏÇ¨Ïö©Ïûê Î°úÍ∑∏Ïù∏ Í∞êÏÇ¨ Î°úÍ∑∏ (Í∞ÑÌé∏ Ìï®Ïàò)
 */
export function logUserLogin(
  requestId: string,
  userId: string,
  userPhone: string,
  userIp: string,
  userAgent?: string,
  sessionId?: string,
  tokenType?: string
): string {
  return auditLogger.logUserLogin(requestId, userId, userPhone, userIp, userAgent, sessionId, tokenType);
}

/**
 * ÌîÑÎ°úÌïÑ Î≥ÄÍ≤Ω Í∞êÏÇ¨ Î°úÍ∑∏ (Í∞ÑÌé∏ Ìï®Ïàò)
 */
export function logProfileUpdate(
  requestId: string,
  userId: string,
  userPhone: string,
  userIp: string,
  oldData: any,
  newData: any,
  changes: AuditChange[],
  reason?: string,
  adminAction = false
): string {
  return auditLogger.logProfileUpdate(requestId, userId, userPhone, userIp, oldData, newData, changes, reason, adminAction);
}

/**
 * ÏïΩÍ¥Ä ÎèôÏùò Í∞êÏÇ¨ Î°úÍ∑∏ (Í∞ÑÌé∏ Ìï®Ïàò)
 */
export function logTermsConsent(
  requestId: string,
  userId: string,
  userPhone: string,
  userIp: string,
  termsType: string,
  version: string,
  action: 'accept' | 'withdraw',
  userAgent?: string
): string {
  return auditLogger.logTermsConsent(requestId, userId, userPhone, userIp, termsType, version, action, userAgent);
}

/**
 * Í∞úÏù∏Ï†ïÎ≥¥ Ïó¥Îûå Í∞êÏÇ¨ Î°úÍ∑∏ (Í∞ÑÌé∏ Ìï®Ïàò)
 */
export function logPiiView(
  requestId: string,
  userId: string,
  userPhone: string,
  userIp: string,
  dataType: string,
  dataId: string,
  reason: 'user_request' | 'admin_review' | 'legal_requirement',
  userAgent?: string
): string {
  return auditLogger.logPiiView(requestId, userId, userPhone, userIp, dataType, dataId, reason, userAgent);
}

/**
 * Í∞úÏù∏Ï†ïÎ≥¥ ÏÇ≠Ï†ú ÏöîÏ≤≠ Í∞êÏÇ¨ Î°úÍ∑∏ (Í∞ÑÌé∏ Ìï®Ïàò)
 */
export function logPiiDeletionRequest(
  requestId: string,
  userId: string,
  userPhone: string,
  userIp: string,
  dataType: string,
  reason: 'user_request' | 'legal_requirement' | 'retention_expired' | 'data_breach',
  legalBasis?: string,
  userAgent?: string
): string {
  return auditLogger.logPiiDeletionRequest(requestId, userId, userPhone, userIp, dataType, reason, legalBasis, userAgent);
}

/**
 * Î≥¥Ïïà Í≤ΩÍ≥† Í∞êÏÇ¨ Î°úÍ∑∏ (Í∞ÑÌé∏ Ìï®Ïàò)
 */
export function logSecurityAlert(
  requestId: string,
  alertType: string,
  severity: 'low' | 'medium' | 'high' | 'critical',
  description: string,
  userIp: string,
  userId?: string,
  userPhone?: string,
  userAgent?: string
): string {
  return auditLogger.logSecurityAlert(requestId, alertType, severity, description, userIp, userId, userPhone, userAgent);
}

// ===== Ï¥àÍ∏∞Ìôî ÏôÑÎ£å Î°úÍ∑∏ =====
console.log('[AUDIT] Audit logging system initialized:', auditLogger.getStatus());
