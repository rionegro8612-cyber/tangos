// src/app/login/page.tsx
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { sendSms, verifyCode, me } from "@/src/lib/api";
import { useAuthStore } from "@/src/store/auth";

export default function LoginPage() {
  const router = useRouter();
  const user = useAuthStore((s) => s.user);
  const setUser = useAuthStore((s) => s.setUser);

  const [phone, setPhone] = useState("");
  const [step, setStep] = useState<1 | 2>(1);
  const [code, setCode] = useState("");
  const [sending, setSending] = useState(false);
  const [verifying, setVerifying] = useState(false);
  const [cooldown, setCooldown] = useState(0);
  const [devCode, setDevCode] = useState<string | undefined>(undefined);
  const devMode = process.env.NODE_ENV !== "production";

  useEffect(() => {
    if (user) router.replace("/profile");
  }, [router, user]);

  useEffect(() => {
    if (!cooldown) return;
    const t = setInterval(() => setCooldown((c) => Math.max(0, c - 1)), 1000);
    return () => clearInterval(t);
  }, [cooldown]);

  async function onSendSms() {
    if (!phone.trim()) return alert("?꾪솕踰덊샇瑜??낅젰?섏꽭??);
    setSending(true);
    try {
      // ????踰덉㎏ ?몄옄??boolean
      const r = await sendSms(phone.trim(), devMode);
      setStep(2);
      setCooldown(60); // ?쒕쾭 湲곕낯 荑⑤떎??60s)??留욎떠 UX ?쒓났
      setDevCode(r.data.devCode);
    } catch (e: any) {
      alert(e.message || "諛쒖넚 ?ㅽ뙣");
    } finally {
      setSending(false);
    }
  }

  async function onVerify() {
    if (!phone.trim() || !code.trim()) return alert("踰덊샇/肄붾뱶瑜??낅젰?섏꽭??);
    setVerifying(true);
    try {
      await verifyCode(phone.trim(), code.trim());
      // 濡쒓렇??吏곹썑 ?ъ슜??議고쉶 ???ㅽ넗?댁뿉 諛섏쁺
      const r = await me();
      setUser(r?.data?.user);
      router.replace("/profile");
    } catch (e: any) {
      alert(e.message || "?몄쬆 ?ㅽ뙣");
    } finally {
      setVerifying(false);
    }
  }

  return (
    <main className="p-6 max-w-md mx-auto space-y-6">
      <h1 className="text-2xl font-semibold">濡쒓렇??/h1>

      {step === 1 && (
        <section className="space-y-3 rounded-xl border p-4">
          <label className="block text-sm text-gray-600">?꾪솕踰덊샇</label>
          <input
            className="w-full rounded border px-3 py-2"
            placeholder="01012345678"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
          />
          <button
            className="w-full rounded bg-black px-3 py-2 text-white disabled:opacity-60"
            onClick={onSendSms}
            disabled={sending || cooldown > 0}
          >
            {sending ? "諛쒖넚 以묅? : cooldown > 0 ? `?щ컻??${cooldown}s` : "?몄쬆 肄붾뱶 諛쏄린"}
          </button>
        </section>
      )}

      {step === 2 && (
        <section className="space-y-3 rounded-xl border p-4">
          <div className="text-sm text-gray-600">?몄쬆 肄붾뱶 (臾몄옄/??</div>
          <input
            className="w-full rounded border px-3 py-2 tracking-widest"
            placeholder="6?먮━"
            value={code}
            onChange={(e) => setCode(e.target.value)}
          />
          {devCode && (
            <p className="text-xs text-gray-500">
              devCode: <b>{devCode}</b> (媛쒕컻 紐⑤뱶)
            </p>
          )}
          <div className="flex gap-2">
            <button
              className="flex-1 rounded bg-black px-3 py-2 text-white disabled:opacity-60"
              onClick={onVerify}
              disabled={verifying}
            >
              {verifying ? "?뺤씤 以묅? : "濡쒓렇??}
            </button>
            <button
              className="rounded border px-3 py-2"
              onClick={() => setStep(1)}
              disabled={verifying}
            >
              踰덊샇 蹂寃?            </button>
          </div>
          <button
            className="underline text-sm disabled:opacity-60"
            onClick={onSendSms}            // ?щ컻?〓룄 媛숈? ?몃뱾??            disabled={sending || cooldown > 0}
            title="?щ컻??
          >
            {cooldown > 0 ? `?щ컻??${cooldown}s` : "肄붾뱶 ?щ컻??}
          </button>
        </section>
      )}
    </main>
  );
}


