name: Deploy with Migration

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Type check
        run: npm run type-check

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
          
      - name: Push Docker image
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging/production
        run: |
          echo "🚀 Deploying ${{ github.sha }} to ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"
          # 여기에 실제 배포 스크립트 추가 (kubectl, docker-compose 등)
          
      - name: Wait for deployment readiness
        run: |
          echo "⏳ Waiting for deployment to be ready..."
          sleep 30  # 실제로는 헬스체크 엔드포인트 확인
          
      - name: Run database migrations
        run: |
          echo "🗄️ Running database migrations..."
          # 환경변수 설정
          export DB_HOST=${{ secrets.DB_HOST }}
          export DB_PORT=${{ secrets.DB_PORT }}
          export DB_NAME=${{ secrets.DB_NAME }}
          export DB_USER=${{ secrets.DB_USER }}
          export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          export DB_SSLMODE=${{ secrets.DB_SSLMODE }}
          
          # 마이그레이션 실행
          chmod +x ./migrate-up.sh
          ./migrate-up.sh
          
      - name: Health check and rollback decision
        run: |
          echo "🔍 Performing health check..."
          
          # 에러율 체크 (예시: 5% 임계치)
          ERROR_RATE=$(curl -s "http://${{ secrets.APP_URL }}/health/metrics" | jq -r '.error_rate // 0')
          
          if (( $(echo "$ERROR_RATE > 0.05" | bc -l) )); then
            echo "❌ Error rate $ERROR_RATE exceeds 5% threshold. Initiating rollback..."
            
            # 롤백 실행
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_PORT=${{ secrets.DB_PORT }}
            export DB_NAME=${{ secrets.DB_NAME }}
            export DB_USER=${{ secrets.DB_USER }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DB_SSLMODE=${{ secrets.DB_SSLMODE }}
            
            chmod +x ./migrate-down.sh
            ./migrate-down.sh
            
            # 이전 버전으로 롤백
            echo "🔄 Rolling back to previous version..."
            # 실제 롤백 로직 추가
            
            exit 1  # 배포 실패로 표시
          else
            echo "✅ Health check passed. Error rate: $ERROR_RATE"
          fi

  rollback:
    needs: deploy
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Rollback to previous version
        run: |
          echo "🔄 Rolling back deployment..."
          # 이전 안정 버전으로 롤백하는 로직
          
      - name: Notify rollback
        run: |
          echo "📢 Rollback completed. Please investigate the deployment failure."
